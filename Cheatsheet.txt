	Why would you want to write your code in an object-oriented programming language?

	Object-oriented programming (OOP) provides several advantages, including modularity, reusability, and easier maintenance of code. By organizing code into objects and classes, you can encapsulate data and behavior, making it easier to understand and manage complex systems. OOP also supports concepts like inheritance and polymorphism, which allow for code reuse and flexibility in designing solutions to different problems.

	What's the difference between a class and an object?

	A class is a blueprint or template for creating objects. It defines the properties (fields) and behaviors (methods) that objects of that class will have. An object, on the other hand, is an instance of a class. It represents a specific entity or instance in memory that conforms to the structure defined by its class. In simpler terms, a class is like a blueprint for a house, while an object is an actual house built based on that blueprint.